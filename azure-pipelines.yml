resources:
  repositories:
    - repository: templates
      type: github
      name: enverus-ea/devops.azure-pipelines-templates
      endpoint: enverus-ea
      ref: refs/tags/v3

trigger:
  - main

pool:
  name: prism-dev-vmss

variables:
  - name: artifactFeed
    value: prism/prism

  - name: defaultBranch
    value: main

  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm

  - name: prism_npm_token
    value: $(System.AccessToken)

strategy:
  matrix:
    node_14_x:
      node_version: 14.x

steps:
  - checkout: self
    fetchDepth: 1
    persistCredentials: true

  - task: NodeTool@0
    inputs:
      versionSpec: $(node_version)
    displayName: Install Node.js

  - task: Cache@2
    inputs:
      key: npm | "$(Agent.OS)" | package-lock.json
      restoreKeys: |
        npm | "$(Agent.OS)"
      path: $(npm_config_cache)

  - task: NPMAuthenticate@0
    inputs:
      workingFile: .npmrc

  - bash: echo "##vso[task.setvariable variable=baseVersion]$(npm run version -s)"
    displayName: Get Base Version

  - template: Version/get.yaml@templates
    parameters:
      version: $(baseVersion)
      defaultBranch: $(defaultBranch)
      template: '{{versionMajor}}.{{versionMinor}}.{{versionPatch}}{{versionPrerelease}}.{{gitShortHash}}'

  - bash: npm --no-git-tag-version version $(Build.BuildNumber)
    displayName: Set Version

  - bash: npm ci
    displayName: Install Dependencies

  - bash: npm run build
    displayName: Build Module

  - bash: npm run test:ci
    displayName: Tests

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunTitle: Node $(System.JobName)
      testResultsFiles: '**/test-*.xml'
      failTaskOnFailedTests: true

  # This task generates _nice_ HTML from the cobertura-coverage.xml that works with Azure DevOps
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '**/*coverage.xml'
      failIfCoverageEmpty: true

  - bash: npm pack $(Build.SourcesDirectory)
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: Package

  - publish: $(Build.ArtifactStagingDirectory)
    artifact: $(System.JobName)

  - ${{ if eq(replace(variables['Build.SourceBranch'], 'refs/heads/', ''), variables['defaultBranch']) }}:
      - template: Version/tag.yaml@templates

      - task: Npm@1
        displayName: Publish to `$(artifactFeed)`
        inputs:
          command: publish
          publishRegistry: useFeed
          publishFeed: $(artifactFeed)

  # Set back to the original version to ensure the Cache Key doesn't change
  - bash: npm --no-git-tag-version --allow-same-version version $(baseVersion)
    displayName: Reset Version for CacheKey